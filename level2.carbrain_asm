// The right hand rule
//  + pickup only 1 crate before passing filter
//  + pickup a 2nd crate after filter
//
// Uses %d as state register:
//    0 == got 0
//    1 == got 1, before filter 1
//    2 == got 1, after filter 1
//    3 == got 2, before filter 2
//    4 == got 2, after filter 2

// Reference:
// 8 positions around car (including own pos):
//
//   .
//  ...
//  .X.
//   .
//
//   0
//  123
//  456
//   7

init:
MOV $0, %d
MOV $IO_DECISION_START, %c

//main program
main:
call $find_right_hand_wall
loop:
//check if can go right
MOVB $SENSOR_POSITION_0_ADDR, %e
ADD $6, %e  //1 tile right of car
MOVB (%e), %b
TEST %b, $SENSE_ROAD
JZ $after_turn_right
call $move_right
after_turn_right:
//check if can go forward
MOVB $SENSOR_POSITION_0_ADDR, %e
ADD $2, %e  //1 tile in front of car
MOVB (%e), %b
TEST %b, $SENSE_ROAD
JZ $left //if can't move forward, go left
MOVB $DECISION_FORWARD, 1(%c)
MOVB $1, (%c)
//previous memory access (to action count) causes bot to have moved and sensor to update, before continuing program
CALL $check_attach
JMP $loop
left:
MOVB $DECISION_TURN_LEFT, 1(%c)
MOVB $1, (%c)
JMP $loop

//helpers

find_right_hand_wall:
MOVB $SENSOR_POSITION_0_ADDR, %e
ADD $2, %e  //1 tile in front of car
MOVB (%e), %b
TEST %b, $SENSE_ROAD
JZ $reached_first_wall
MOVB $DECISION_FORWARD, 1(%c)
MOVB $1, (%c)
CALL $check_attach
JMP $find_right_hand_wall

reached_first_wall:
MOVB $SENSOR_POSITION_0_ADDR, %e
ADD $4, %e  //1 tile left of car
MOVB (%e), %b
TEST %b, $SENSE_ROAD
JNZ $no_wall_left
MOVB $DECISION_TURN_LEFT, 1(%c)
MOVB $1, (%c)
JMP $reached_first_wall
no_wall_left:
MOVB $DECISION_TURN_LEFT, 1(%c)
MOVB $1, (%c)
RET  //find_right_hand_wall


check_attach:
CMP $1, %d
JE $check_attach_ret  //don't attach in state 1
CMP $3, %d
JE $check_attach_ret  //don't attach in state 3
MOVB $SENSOR_POSITION_0_ADDR, %e
ADD $5, %e  //car tile itself
MOVB (%e), %b
TEST %b, $SENSE_CRATE
JZ $check_attach_ret
CALL $pickup
CALL $check_state_change_to_1
CALL $check_state_change_to_3
check_attach_ret:
CALL $check_state_change_to_2
CALL $check_state_change_to_4
RET

pickup:
MOVB $DECISION_ATTACH, 1(%c)
MOVB $1, (%c)
//previous memory access (to action count) causes bot to have moved and sensor to update, before continuing program
RET

check_state_change_to_1:
CMP $0, %d
JNE $check_state_change_to_1_ret  //only change if in state 0
MOVB ($SENSOR_CRATE_COUNT_ADDR), %e
CMP $1, %e
JNE $check_state_change_to_1_ret  //change state 0->1 if 1 crate attached
MOV $1, %d
check_state_change_to_1_ret:
RET

check_state_change_to_2:
CMP $1, %d
JNE $check_state_change_to_2_ret  //only change if in state 1
MOVB $SENSOR_POSITION_0_ADDR, %e
ADD $5, %e  //car tile itself
MOVB (%e), %b
TEST %b, $SENSE_FILTER
JZ $check_state_change_to_2_ret  //change state 1->2 if on filter
MOV $2, %d
check_state_change_to_2_ret:
RET

check_state_change_to_3:
CMP $2, %d
JNE $check_state_change_to_3_ret  //only change if in state 2
MOVB ($SENSOR_CRATE_COUNT_ADDR), %e
CMP $2, %e
JNE $check_state_change_to_3_ret  //change state 2->3 if 2 crates attached
MOV $1, %d
check_state_change_to_3_ret:
RET

check_state_change_to_4:
CMP $3, %d
JNE $check_state_change_to_4_ret  //only change if in state 3
MOVB $SENSOR_POSITION_0_ADDR, %e
ADD $5, %e  //car tile itself
MOVB (%e), %b
TEST %b, $SENSE_FILTER
JZ $check_state_change_to_4_ret  //change state 3->4 if on filter
MOV $4, %d
check_state_change_to_4_ret:
RET

move_right:
MOVB $DECISION_TURN_RIGHT, 1(%c)
MOVB $DECISION_FORWARD, 2(%c)
MOVB $2, (%c)
//previous memory access (to action count) causes bot to have moved and sensor to update, before continuing program
RET
